module Main exposing (main)

import Expect
import Test exposing (describe, test)
import Test.Runner.Node exposing (Program, run)
import Parser as P exposing ((|.), (|=))



main : Program
main =
    run <|
        describe "Parser Tests"
            [ describe "int"
                [ test "Simple integer" <| \{} ->
                    P.run P.int "123456"
                        |> Expect.equal (Ok 123456)
                , test "Failure case" <| \{} ->
                    P.run P.int "3.1415"
                        |> expectErr
                ]
            , describe "combinators"
                [ test "functions" <| \{} ->
                    let
                        parser =
                            P.succeed (\a b -> a + b)
                                |> P.keep P.int
                                |> P.skip (P.symbol "+")
                                |> P.keep P.int
                    in
                    P.run parser "3+5"
                        |> Expect.equal (Ok 8)
                , test "operators" <| \{} ->
                    let
                        parser =
                            P.succeed (\a b -> a + b)
                                |= P.int
                                |. P.symbol "+"
                                |= P.int
                    in
                    P.run parser "2+2"
                        |> Expect.equal (Ok 4)
                ]
            ]


expectErr : Result err ok -> Expect.Expectation
expectErr result =
    when result is
        Err _ ->
            Expect.pass

        Ok _ ->
            Expect.fail "I expected this test to fail with an Err case"
